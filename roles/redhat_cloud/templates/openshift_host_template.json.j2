{
	"static_network_config": [
		{% set count = namespace(value=5) %}
		{% for host in groups['tag_ocp_networking'] %}
		{
			"network_yaml": "dns-resolver: \n  config: \n    server: \n      - \"{{ ocp_ips_opsbox_ip }}\"\ninterfaces: \n- \n  ipv4: \n    address: \n      - \n        ip: \"{{ ocp_ips_reservation_network_cidr | ansible.utils.nthhost(count.value) }}\"\n        prefix-length: {{ ocp_ips_reservation_cidr }}\n    dhcp: false\n    enabled: true\n  ipv6: \n    enabled: false\n  name: bond0.{{ metal_ocp_vlan }}\n  state: up\n  type: vlan\n  vlan:\n    base-iface: bond0\n    id: {{ metal_ocp_vlan }}\n- \n  name: bond0\n  ipv4:\n    enabled: false\n  ipv6: \n    enabled: false\n  state: up\n  type: bond\n  link-aggregation: \n    mode: 802.3ad\n    options:\n      miimon: \"100\"\n    slaves: \n      - {{ metal_host_interface_prefix }}0\n      - {{ metal_host_interface_prefix }}1\nroutes: \n  config: \n    - \n      destination: 0.0.0.0/0\n      next-hop-address: \"{{ ocp_ips_reservation_network_cidr | ansible.utils.nthhost(1) }}\"\n      next-hop-interface: bond0.{{ metal_ocp_vlan }}\n      table-id: 254",
			"mac_interface_map": [
			  {
				"mac_address": "{{ hostvars['localhost']['eth1_mac_table'].get(host) }}",
				"logical_nic_name": "{{ metal_host_interface_prefix }}1"
				},
			  {
				"mac_address": "{{ hostvars['localhost']['eth0_mac_table'].get(host) }}",
				"logical_nic_name": "{{ metal_host_interface_prefix}}0"
			  }
			]
		{% set count.value = count.value + 1 %}
		}{% if not loop.last %},{% endif %}{% endfor %}
	]
}